---
export const prerender = false;

import MainLayout from "../layouts/MainLayout.astro";
import { WaitlistFormData, WaitlistHeaderData } from "../components/constants/waitlist";
import WaitListBanner from "../components/Waitlist/WaitListBanner.astro";
import PostFormField from "../components/Waitlist/PostFormField.astro";
import { URLS } from "../utils/urls";
import { countries } from "../components/constants/common";
import Icon from "../components/common/Icon.astro";
import BathroomSection from "../components/Home/BathroomSection.astro";
import { bathroomData } from "../components/constants/home";
import { scrollDataSection } from "../components/constants/home";
import { upsertShopifySubscriber } from "../server/shopify";
import nodemailer from "nodemailer";

const metaTitle = "Join Our Community for Elderly Safety Solutions – EyEagle";
const metaDesc = "Join EyEagle - Stay connected and ensure safety with our emergency alert devices for the elderly. Reliable, efficient, and easy to set up!";

const {
  PUBLIC_SMTP_HOST: smtpHost,
  PUBLIC_SMTP_USER: smtpUser,
  PUBLIC_SMTP_PASS: smtpPassword,
  PUBLIC_SMTP_FROM: smtpFrom,
  PUBLIC_SMTP_TO: smtpTo,
  PUBLIC_SMTP_PORT: smtpPort,
  USE_SHOPIFY_JOIN,
} = import.meta.env;

let formPosted = false;

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();

    const firstName = String(formData.get("firstName") || "");
    const lastName = String(formData.get("lastName") || "");
    const email = formData.get("userEmail");
    const countryCode = formData.get("phCode");
    const phoneNumber = formData.get("phoneNumber");
    const city = formData.get("userCity");
    const acceptance = formData.get("userAcceptCheck") === "on";

    const apiPayload = {
      name: `${firstName} ${lastName}`.trim(),
      countryCode,
      mobileNumber: phoneNumber,
      email,
      city,
      isNewsletterSubscribed: acceptance,
    };

    const fetchResponse = await fetch(URLS.USER_WAITLIST_API, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(apiPayload),
    });

    const apiResult = await fetchResponse.json();

    const useShopify = String(USE_SHOPIFY_JOIN || "").toLowerCase() === "true" || String(USE_SHOPIFY_JOIN || "") === "1";

    if (useShopify) {
      // Subscribe/create customer in Shopify with double opt-in when accepted
      try {
        if (acceptance) {
          const fullPhone = `${countryCode || ""}${phoneNumber || ""}`.trim();
          const tags = ["waitlist", "source:join-page"]; // Adjust if you prefer different tags
          const subResult = await upsertShopifySubscriber({
            email: String(email),
            firstName: firstName || undefined,
            lastName: lastName || undefined,
            phone: fullPhone || undefined,
            tags,
          });
          if (!subResult.ok) {
            console.error("Shopify subscription error:", subResult.error);
          }
        }
      } catch (shopifyErr) {
        console.error("Error while calling Shopify:", shopifyErr);
      }
    } else {
      // Fallback to email notification via Nodemailer (original behavior)
      try {
        const transporter = nodemailer.createTransport({
          host: smtpHost,
          port: Number(smtpPort),
          secure: false,
          auth: { user: smtpUser, pass: smtpPassword },
        });

        const emailContent = `\nNew Waitlist Registration:\n\nName: ${`${firstName} ${lastName}`.trim()}\nEmail: ${email}\nPhone: ${countryCode || ""}${phoneNumber || ""}\nCity: ${city}\nNewsletter: ${acceptance ? "Yes" : "No"}\n        `;

        const currentDate = new Date().toISOString().slice(0, 10);

        await transporter.sendMail({
          from: smtpFrom,
          to: smtpTo,
          subject: `New Waitlist Registration - ${currentDate}`,
          text: emailContent,
        });
      } catch (emailErr) {
        console.error("Error while sending email:", emailErr);
      }
    }

    if (apiResult?.status === "success") {
      formPosted = true;
    }
  } catch (error) {
    console.error("Error while submitting form:", error);
  }
}
---

<MainLayout title={metaTitle} desc={metaDesc}>
  <section class="bg-[#F6F4F2] font-sans-instrument">
    <section class="xl:container px-5 py-10 md:px-20 md:py-32">
      <div class="flex flex-col lg:flex-row justify-between items-center gap-10 lg:gap-28">
        <!-- Left content -->
        <div class="lg:w-1/2 text-center md:text-start">
          <h2 class="text-3xl md:text-5xl font-semibold md:leading-[60px] mb-5 md:mb-8">{WaitlistHeaderData.title}</h2>
          <p class="text-lg font-medium">{WaitlistHeaderData.description}</p>
        </div>
        <!-- Right form -->
        <div class="lg:w-1/2 md:p-10 rounded-xl shadow-sm">
          <div id="joinForm" class={formPosted ? "hidden" : "block"}>
          <form method="POST" class="flex flex-col gap-3" id="waitlistForm">
            <!-- Full Name -->
            <label>Full Name*</label>
            <input
              type="text"
              name="fullName"
              placeholder="Enter Name"
              required
              class="w-full p-3 border border-[#9C9C9C] rounded-xl placeholder:text-[#666666] placeholder:text-base"
            />
            <!-- Phone Number -->
            <label>Phone number*</label>
              <div class="relative">
                <div
                  id="dropdownButton"
                  class="absolute inset-y-0 left-0 bg-[#F6F6F6] px-2 text-[#666666] text-base border border-r-0 border-[#9C9C9C] rounded-l-xl flex items-center cursor-pointer"
                >
                  <span class="flex items-center">
                    <Icon iconName="keyboard_arrow_down" classNames="hidden" />
                  </span>
                  <div class="flex items-center gap-2"></div>
                </div>
                <input id="phCode" name="phCode" value="" class="hidden" />
                <div id="dropdownMenu" class="absolute mt-1 bg-white border border-gray-300 rounded-md shadow-md hidden text-black max-h-[250px] overflow-y-auto w-52 z-20">
                  {
                    countries
                      .sort((a, b) => a.code.localeCompare(b.code))
                      .map((country) => (
                        <div class="px-4 py-2 cursor-pointer hover:bg-gray-300 text-black flex items-center gap-2" data-value={country.dial_code}>
                          <img src={`https://flagcdn.com/w40/${country.code.toLowerCase()}.png`} alt={`${country.code} flag`} width="20" />
                          {country.dial_code}
                        </div>
                      ))
                  }
                </div>

                <input
                  id="phoneNumField"
                  type="number"
                  name="phoneNumber"
                  placeholder="Phone Number"
                  required
                  class="w-full p-3 border border-[#9C9C9C] rounded-xl placeholder:text-[#666666] placeholder:text-base"
                />
              </div>
              

            <!-- Email -->
            <label>Email*</label>
            <input
              type="email"
              name="userEmail"
              placeholder="Enter Email"
              required
              class="w-full p-3 border border-[#9C9C9C] rounded-xl placeholder:text-[#666666]"
            />

            <!-- City -->
            <label>City*</label>
            <input
              type="text"
              name="userCity"
              placeholder="City Name"
              required
              class="w-full p-3 border border-[#9C9C9C] rounded-xl placeholder:text-[#666666]"
            />

            <!-- Interests -->
            <div class="mt-2">
              <p class="font-medium mb-4">Interest (Optional)</p>
              <div class="flex flex-col gap-2">
              <label class="flex items-center gap-2 text-[#2E2323]">
              <input type="checkbox" name="userAcceptCheck" class="h-4 w-4 border-gray-400" />
              Notify me when Guardian-X Kit launches
            </label>
            <label class="flex items-center gap-2 text-[#2E2323]">
              <input type="checkbox" name="userAcceptCheck" class="h-4 w-4 border-gray-400" />
              I want early access / beta testing
            </label>
            <label class="flex items-center gap-2 text-[#2E2323]">
              <input type="checkbox" name="userAcceptCheck" class="h-4 w-4 border-gray-400" />
              I want to talk to a safety expert
            </label>
            </div>
            </div>

            <!-- Submit button -->
            <button
              type="submit"
              class="w-full py-3 rounded-full text-white bg-[#CC0000] font-medium mt-4"
            >
              Reserve Early Access
            </button>

            <p class="text-base text-center text-gray-600 mt-2">
              No payment now. We’ll only notify you when it’s available
            </p>
          </form>
          </div>
        </div>

        <div id="postFormField" class={formPosted ? "block" : "hidden"}>
          <PostFormField />
        </div>
      </section>

      <div class="md:pb-40 px-20 py-20 grid lg:grid-cols-4 gap-12">
        {
          bathroomData?.map((item: { id: number }) => (
            <a href={`/#${scrollDataSection[item.id]}` }>
              <BathroomSection item={item} mobile={false} />
            </a>
          ))
        }
      </div>
    </section>
  </section>
</MainLayout>

<style>
  .spinner {
    width: 20px;
    height: 20px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
  }

  .spinner-large {
    width: 48px;
    height: 48px;
    border: 4px solid rgba(204, 0, 0, 0.3);
    border-radius: 50%;
    border-top-color: #cc0000;
    animation: spin 1s ease-in-out infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>

<script is:inline define:vars={{ countries, formPosted }}>
  const dropdownButton = document.getElementById("dropdownButton");
  const dropdownMenu = document.getElementById("dropdownMenu");
  const phCode = document.getElementById("phCode");
  const phoneNumField = document.getElementById("phoneNumField");
  const submitButton = document.getElementById("submitButton");
  const buttonText = document.getElementById("buttonText");
  const loader = document.getElementById("loader");
  const pageLoader = document.getElementById("pageLoader");

  const iconSpan = document.createElement("span");
  iconSpan.className = "material-symbols-outlined text-base md:text-lg ml-2";
  iconSpan.textContent = "keyboard_arrow_down";

  dropdownButton.addEventListener("click", () => {
    dropdownMenu.classList.toggle("hidden");
  });

  dropdownMenu.addEventListener("click", (event) => {
    const option = event.target.closest("[data-value]");
    if (!option) return;

    const selectedDialCode = option.dataset.value;
    const country = countries.find((c) => c.dial_code === selectedDialCode);

    dropdownButton.innerHTML = "";
    const flagImage = document.createElement("img");
    flagImage.src = `https://flagcdn.com/w40/${country.code.toLowerCase()}.png`;
    flagImage.alt = `${country.code} flag`;
    flagImage.width = 20;
    flagImage.className = "mr-2";

    dropdownButton.appendChild(flagImage);
    dropdownButton.appendChild(document.createTextNode(selectedDialCode));
    dropdownButton.appendChild(iconSpan);

    phCode.value = selectedDialCode;

    dropdownMenu.classList.add("hidden");

    document
      .querySelectorAll("#dropdownMenu > div[data-value]")
      .forEach((el) => el.classList.remove("bg-gray-300"));
    option.classList.add("bg-gray-300");
  });

  document.addEventListener("click", (event) => {
    if (
      !dropdownButton.contains(event.target) &&
      !dropdownMenu.contains(event.target)
    ) {
      dropdownMenu.classList.add("hidden");
    }
  });

  function initializeDefaultPhoneCode() {
    phoneNumField.classList.add("pl-[125px]");
    dropdownButton.classList.add("max-w-[105px]");

    const defaultDialCode = "+91";
    const defaultCountry = countries.find(
      (c) => c.dial_code === defaultDialCode
    );

    if (defaultCountry) {
      const flagImage = document.createElement("img");
      flagImage.src = `https://flagcdn.com/w40/${defaultCountry.code.toLowerCase()}.png`;
      flagImage.alt = `${defaultCountry.code} flag`;
      flagImage.width = 20;
      flagImage.className = "mr-2";

      dropdownButton.innerHTML = "";
      dropdownButton.appendChild(flagImage);
      dropdownButton.appendChild(document.createTextNode(defaultDialCode));
      dropdownButton.appendChild(iconSpan);

      phCode.value = defaultDialCode;

      const defaultOption = Array.from(
        dropdownMenu.querySelectorAll("[data-value]")
      ).find((el) => el.dataset.value === defaultDialCode);

      if (defaultOption) {
        defaultOption.classList.add("bg-gray-300");
      }
    }
  }

  function scrollToFunction() {
    const joinForm = document.getElementById("joinForm");
    const postFormfill = document.getElementById("postFormField");

    formPosted
      ? postFormfill.scrollIntoView({ behavior: "smooth", block: "start" })
      : joinForm.scrollIntoView({ behavior: "smooth", block: "center" });
  }

  scrollToFunction();
  initializeDefaultPhoneCode();

  document
    .getElementById("waitlistForm")
    .addEventListener("submit", function (e) {
      buttonText.classList.add("opacity-0");
      loader.classList.remove("hidden");
      submitButton.disabled = true;
    });
</script>
