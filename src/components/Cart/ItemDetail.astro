---
import { Image } from "astro:assets";
const productData = Astro.props.productData;
---

<section class="lg:px-5 flex flex-col max-md:flex-col-reverse gap-3 max-lg:w-full max-lg:gap-10 py-10 xl:container">
    <div id="dropDownItem">
        {productData?.map((item:any)=>
            <div class="flex max-sm:grid gap-5 items-center max-md:px-2 pb-8">
                <Image src={item.imageSrc} alt={item.title}/>
                <div>
                    <h2 class="font-bold text-xl">{item.title}</h2>
                    <p class="font-normal text-lg line-clamp-2 leading-6">{item.description}</p>
                </div>
                <div id={item.id} class="flex gap-2 lg:justify-center lg:items-center">
                    <button id={`removeButton-${item.id}`} class="h-8 w-8 rounded-full border font-normal border-black">-</button><p id={`quantityShow-${item.id}`} class="font-normal w-4 flex justify-center items-center">1</p><button id={`addButton-${item.id}`} class="h-8 w-8 rounded-full border font-normal border-black">+</button>
                </div>
            </div>
            )}
    </div>
    <div class="max-md:flex-col-reverse max-md:flex">
        <div id="dropDownItem1" class="border my-10 border-gray-300"></div>
            <div id="dropDownItem2" class="flex justify-between items-center px-5 pb-2">
                <p class="text-lg font-normal">Subtotal (<span id="subtotalItem">2</span> items)</p>
                <p id="subtotalPrice" class="font-bold text-xl">₹49,999</p>
            </div>
            <div id="dropDownItem3" class="flex justify-between items-center px-5 pb-2">
                <p class="text-lg font-normal">Shipping</p>
                <p class="font-bold text-xl">Free</p>
            </div>
            <div id="dropDownItem4" class="flex justify-between items-center px-5 pb-2">
                <p class="text-lg font-normal">Taxes</p>
                <p class="font-bold text-xl">0</p>
            </div>
            <div id="dropDownItem5" class="border my-4 border-gray-300 mx-4"></div>
            <div id="dropDown" class="flex justify-between items-center px-5 pb-2">
                <p class="text-xl font-bold flex items-center gap-2">Total <svg id="mySvg" class="md:hidden" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M4 9.99997C4 9.99997 6.94593 6 8 6C9.05413 6 12 10 12 10" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    </p>
                <p id="total" class="font-bold text-xl">₹49,999</p>
            </div>
    </div>
</section>

<script is:inline define:vars={{productData}}>
    const dropDown = document.getElementById('dropDown');
    const dropDownItem = document.getElementById('dropDownItem');
    const dropDownItem1 = document.getElementById('dropDownItem1');
    const dropDownItem2 = document.getElementById('dropDownItem2');
    const dropDownItem3 = document.getElementById('dropDownItem3');
    const dropDownItem4 = document.getElementById('dropDownItem4');
    const dropDownItem5 = document.getElementById('dropDownItem5');
    let subtotalItem = document.getElementById('subtotalItem');
    let subtotalPrice = document.getElementById('subtotalPrice');
    let total = document.getElementById('total');
    let totalCalculation = 0;
    let quantities = {};

    function updateTotal() {
        let newTotal = 0;
        let count = 0;
        for (let item of productData) {
            newTotal += (quantities[item.id] || 1) * item.price;
            count += (quantities[item.id] || 1);
        }
        subtotalItem.innerHTML = count;
        total.innerHTML = `₹${newTotal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`;
        subtotalPrice.innerHTML = `₹${newTotal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`;
    }

    for(let item of productData){
    totalCalculation += item.price;
    let addButton = document.getElementById(`addButton-${item?.id}`);
    let removeButton = document.getElementById(`removeButton-${item?.id}`);
    let quantityShow = document.getElementById(`quantityShow-${item?.id}`);
    quantities[item.id] = 1; 
        quantityShow.innerText = quantities[item.id];
    addButton.addEventListener("click",()=>{
        let currentQuantity = Number(quantityShow.innerText) || 0;
            currentQuantity += 1;
            quantities[item.id] = currentQuantity;
            quantityShow.innerText = currentQuantity;
            updateTotal();
    });
    removeButton.addEventListener("click",()=>{
        let currentQuantity = Number(quantityShow.innerText) || 1;
            if (currentQuantity > 1) {
                currentQuantity -= 1;
                quantities[item.id] = currentQuantity;
                quantityShow.innerText = currentQuantity;
                updateTotal();
            }
    });
    }
    updateTotal();

    dropDown.addEventListener('click',()=>{
        const svgElement = document.getElementById('mySvg');
        svgElement.style.transform = `${svgElement.style.transform === "rotate(180deg)" ? "" : "rotate(180deg)"}`;
        svgElement.style.transition = 'transform 0.3s ease-in-out';
        let display = dropDownItem.style.display;
        dropDownItem.style.display = `${display ? "" : "none"}`;
        dropDownItem1.style.display = `${display ? "" : "none"}`;
        dropDownItem2.style.display = `${display ? "" : "none"}`;
        dropDownItem3.style.display = `${display ? "" : "none"}`;
        dropDownItem4.style.display = `${display ? "" : "none"}`;
        dropDownItem5.style.display = `${display ? "" : "none"}`;
    })
    
</script>

<script is:inline>
    
</script>